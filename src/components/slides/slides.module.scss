/* components/slides/slides.module.scss */

.slide {
  position: relative;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
}

.s6 {
  height: 100vh;
  width: 100vw;

  /* Container for the entire diagram */
  .diagramContainer {
    width: 100vw;
    height: 100vh;
    background-color: #1e1e1e; /* Dark background */
    position: relative;
    overflow: hidden;
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  }

  /* Generic node box styling */
  .nodeBox {
    border: 1px solid #555;
    border-radius: 4px;
    padding: 8px;
    color: #fff;
    text-align: center;
  }

  /* Example color-coded node styles */
  .protocolNode {
    background-color: #666;
  }

  .messageFormatsNode {
    background-color: #0eb8a7; /* Teal */
  }

  .orderingNode {
    background-color: #f9bf3b; /* Orange-gold */
    color: #000; /* If you prefer black text on gold */
  }

  .expectedResponsesNode {
    background-color: #4b98f7; /* Blue */
  }

  .deviceNode {
    background-color: #333;
  }

  .responseNode {
    background-color: #444;
  }

  /* TCP header node styling (table-like) */
  .tcpHeaderNode {
    background-color: #2c2c2c;
    border: 1px solid #666;
    border-radius: 4px;
    color: #fff;
    width: 240px;
    padding: 8px;

    .tcpHeaderTop {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 8px;

      .headerLabel {
        background-color: #0eb8a7;
        color: #fff;
        padding: 2px 6px;
        border-radius: 4px;
        margin-right: 8px;
      }

      .dataLabel {
        background-color: #fff;
        color: #000;
        padding: 2px 6px;
        border-radius: 4px;
      }
    }

    .tcpHeaderFields {
      /* Example grid layout for fields */
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-gap: 4px;
      font-size: 0.85rem;

      .field {
        background-color: #444;
        padding: 4px;
        border-radius: 4px;
      }
      .fieldImportant {
        background-color: #c0392b; /* Red for flags, etc. */
        color: #fff;
        text-align: center;
      }
    }
  }

  /* Make edges dotted and white-ish */
  .reactflow__edge path {
    stroke-dasharray: 4 4;
    stroke: #fff;
    stroke-width: 2px;
  }

  /* React Flow built-in components styling */
  .reactflow__minimap {
    background-color: #333;
    border: 1px solid #555;
  }
  .reactflow__controls {
    background-color: #333;
    border: 1px solid #555;
  }
  .reactflow__background {
    background-color: transparent;
  }
}

.s3 {
  &__info {
    color: black;
  }
}

.s2 {
  &__layer {
    pointer-events: none;
    position: absolute;
    inset: 0;
    overflow-y: auto;
    scrollbar-width: none;
  }

  &__layer::-webkit-scrollbar {
    display: none;
  }

  &__layerContent {
    position: relative;

    .img {
      width: 100%;
      background-color: #fff;
      padding: 0.5rem;
    }

    .imgContent {
      margin-top: -5px;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 0.5rem;
      backdrop-filter: blur(10px);
    }

    .alt {
      font-size: 1rem;
      line-height: normal;
      margin-bottom: 0.25rem;
    }

    .attr {
      pointer-events: all;
      cursor: pointer;
      font-size: 0.5rem;
      line-height: 0.5rem;
      color: #aaaaaa;

      a {
        color: #15557a;
        text-decoration: underline;
      }
    }
  }

  &__line {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 4px;
    background-color: #ccc;
    transform: translateX(-50%);
  }

  &__timeline {
    position: relative;
    height: 100%;
    overflow-y: auto;
    padding: 2rem 0;
    width: 100%;
    margin: 0 auto;
    z-index: 10;

    .item {
      position: relative;
      margin: 2rem 0;
      max-width: 400px;
      margin-bottom: 500px;

      &.left {
        margin-left: calc(45% - 400px);
        margin-right: auto;
        text-align: right;
      }

      &.right {
        margin-right: calc(45% - 400px);
        margin-left: auto;
        text-align: left;
      }

      .content {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 1);
        position: relative;
      }

      .year {
        display: block;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: black;
        font-size: 2rem;
      }

      .text {
        margin: 0;
        color: black;
        font-size: 1.5rem;
      }
    }

    @media (max-width: 900px) {
      .item {
        max-width: 100%;
        width: 100% !important;
        left: 0 !important;
        text-align: left !important;
        padding: 1rem;
        margin-left: 0 !important;
        margin-right: 0 !important;
      }
    }
  }
}

.s1 {
  &__starfield {
    height: 100vh;
    width: 100vw;
  }
  &__titleContainer {
    position: absolute;
    top: 25%;
    left: 25%;
  }
  &__title {
    font-size: 3rem;
    position: absolute;
    top: 0%;
    left: 0%;
    transform: translate(-25%, -30%);
    animation: flicker 1s steps(20, end) forwards,
      fadeIn 0.2s ease-in-out 1s forwards, fadeIn 1s ease-in-out 1.2s forwards;

    h1 {
      position: relative;
      display: inline-block;
      color: #fff;

      /* init our glitch offsets */
      --glitch-x: 0px;
      --glitch-y: 0px;

      &::before {
        content: attr(data-text);
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        color: transparent;
        -webkit-text-stroke: 1px #ffffff;
        opacity: 0.8;
        pointer-events: none;

        /* use the variables for the glitch offset */
        transform: translate(var(--glitch-x), var(--glitch-y));
      }
    }
  }
}

@keyframes flicker {
  /* start completely off */
  0% {
    opacity: 0;
  }
  /* quick on/off bursts */
  2% {
    opacity: 1;
  }
  6% {
    opacity: 0;
  }
  9% {
    opacity: 0.9;
  }
  12% {
    opacity: 0;
  }
  15% {
    opacity: 1;
  }
  18% {
    opacity: 0.2;
  }
  22% {
    opacity: 0;
  }
  25% {
    opacity: 0.8;
  }
  83% {
    opacity: 0.95;
  }
  95% {
    opacity: 0.6;
  }
  /* end at a low “last flicker” level */
  100% {
    opacity: 0.3;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
